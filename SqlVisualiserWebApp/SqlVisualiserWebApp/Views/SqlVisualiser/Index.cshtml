@{
    ViewData["Title"] = "Database Analysis";
}

<div class="container mt-4">
    <h2>Database Analysis</h2>

    <div id="messageArea" class="mt-3 mb-3"></div>

    <form id="dataSourceForm">
        <div class="mb-3 d-flex align-items-center">
            <label for="dataSource" class="form-label me-2 mb-0">Enter Data Source:</label> <input type="text" class="form-control me-2" id="dataSource" name="dataSource" required placeholder="e.g. FINTECHDB01-DEV,50003" style="flex: 1;" /> <button type="button" id="fetchCatalogsBtn" class="btn btn-secondary rounded-md">Retrieve Catalogs</button>
        </div>
    </form>

    <div id="catalogSelection" style="display:none;" class="mt-4">
        <h4>Select Catalog</h4>
        <div class="mb-3">
            <label for="catalogs" class="form-label">Available Catalogs:</label>
            <select id="catalogs" name="catalogs" class="form-select"></select>
        </div>
        <button type="button" id="analyzeCatalog" class="btn btn-primary rounded-md">Analyze Selected Catalog</button>
    </div>

    <div id="graphContainer" class="mt-4 border rounded-md p-3" style="display:none;">
        <h4>Dependency Graph</h4>
        <div id="cy" style="height: 600px; width: 100%; border: 1px solid #ccc; background-color: #f8f9fa;">
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.23.0/cytoscape.min.js"></script>
    <script src="https://unpkg.com/dagre@0.8.5/dist/dagre.min.js"></script>
    <script src="https://unpkg.com/cytoscape-dagre@2.5.0/cytoscape-dagre.js"></script>

    <script>
        $(document).ready(function () {
            // --- Cache jQuery selectors ---
            const dataSourceInput = $('#dataSource');
            const catalogSelectionDiv = $('#catalogSelection');
            const catalogDropdown = $('#catalogs');
            const messageArea = $('#messageArea');
            const analyzeButton = $('#analyzeCatalog');
            const fetchCatalogsButton = $('#fetchCatalogsBtn');
            const graphContainer = $('#graphContainer');
            const cyContainer = $('#cy');
            let cyInstance = null;

            // --- Event Listeners ---
            fetchCatalogsButton.on('click', fetchCatalogs);
            analyzeButton.on('click', analyzeCatalog);

            // --- Initial State ---
            initializePage();

            // --- Named Functions ---

            function initializePage() {
                catalogDropdown.prop('disabled', true);
                analyzeButton.prop('disabled', true);
                hideGraph();
            }

            function showMessage(message, type = 'danger') {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show rounded-md" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                messageArea.html(alertHtml);
            }

            function clearMessages() {
                messageArea.html('');
            }

            function hideGraph() {
                if (cyInstance) {
                    try {
                        cyInstance.destroy(); // Clean up previous instance
                    } catch (e) {
                        console.error("Error destroying previous Cytoscape instance:", e);
                    }
                    cyInstance = null;
                }
                graphContainer.hide();
                cyContainer.empty(); // Clear the container content just in case
            }

            function fetchCatalogs() {
                const dataSource = dataSourceInput.val().trim();
                hideGraph(); // Hide graph when fetching new catalogs

                if (!dataSource) {
                    showMessage('Please enter a data source connection string.', 'warning');
                    resetCatalogControls(); // Ensure controls are reset
                    enableControls(); // Ensure controls are enabled if validation fails
                    return;
                }

                clearMessages();
                disableControls(); // Disable controls during fetch
                showMessage('Retrieving catalogs...', 'info'); // Loading message

                $.ajax({
                    url: '/SqlVisualiser/GetCatalogs',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(dataSource),
                    dataType: 'json',
                    success: handleFetchCatalogsSuccess,
                    error: handleFetchCatalogsError,
                    complete: enableControls // Re-enable controls when done
                });
            }

            function handleFetchCatalogsSuccess(data) {
                clearMessages(); // Clear loading message
                if (data && data.success) {
                    showMessage('Successfully connected and fetched catalogs.', 'success');
                    populateCatalogDropdown(data.catalogs);
                } else {
                    const errorMessage = data && data.message ? data.message : 'An unknown error occurred while fetching catalogs.';
                    showMessage(errorMessage, 'danger');
                    resetCatalogControls();
                }
            }

            function handleFetchCatalogsError(jqXHR, textStatus, errorThrown) {
                clearMessages(); // Clear loading message
                console.error("AJAX Error (GetCatalogs):", textStatus, errorThrown, jqXHR.responseText);
                let errorMsg = 'An error occurred while communicating with the server. Please check the connection string or server status.';
                if (jqXHR.status === 400) {
                    errorMsg = 'Invalid request. Please check the format of your connection string.';
                } else if (jqXHR.status === 500) {
                    errorMsg = 'A server error occurred while fetching catalogs. Please try again later or contact support.';
                }
                showMessage(errorMsg, 'danger');
                resetCatalogControls();
            }

            function populateCatalogDropdown(catalogs) {
                catalogDropdown.empty();
                if (catalogs && catalogs.length > 0) {
                    catalogs.forEach(catalog => {
                        catalogDropdown.append($('<option>', { value: catalog, text: catalog }));
                    });
                    catalogSelectionDiv.slideDown();
                    catalogDropdown.prop('disabled', false);
                    analyzeButton.prop('disabled', false);
                } else {
                    showMessage('Connection successful, but no databases (catalogs) found.', 'warning');
                    resetCatalogControls(); // Keep controls disabled if no catalogs
                }
            }

            function resetCatalogControls() {
                catalogSelectionDiv.slideUp();
                catalogDropdown.empty().prop('disabled', true);
                analyzeButton.prop('disabled', true);
            }

            function disableControls() {
                dataSourceInput.prop('disabled', true);
                fetchCatalogsButton.prop('disabled', true);
                // Also disable analysis controls if they are visible
                catalogDropdown.prop('disabled', true);
                analyzeButton.prop('disabled', true);
            }

            function enableControls() {
                dataSourceInput.prop('disabled', false);
                fetchCatalogsButton.prop('disabled', false);
                // Only re-enable analysis controls if catalogs were successfully loaded
                const catalogsExist = catalogDropdown.children('option').length > 0;
                catalogDropdown.prop('disabled', !catalogsExist);
                analyzeButton.prop('disabled', !catalogsExist);
            }

            function analyzeCatalog() {
                const selectedCatalog = catalogDropdown.val();
                const dataSource = dataSourceInput.val().trim();
                hideGraph(); // Hide previous graph before analyzing again

                if (!selectedCatalog) {
                    showMessage('Please select a catalog to analyze.', 'warning');
                    return;
                }
                if (!dataSource) {
                    showMessage('Data source is missing.', 'warning');
                    return;
                }

                clearMessages();
                disableControls(); // Disable all controls during analysis
                showMessage('Analyzing catalog dependencies...', 'info'); // Show processing message

                const postData = { dataSource: dataSource, catalog: selectedCatalog };

                $.ajax({
                    // *** UPDATED URL TO POINT TO DIRECTED GRAPH ENDPOINT ***
                    url: '/SqlVisualiser/ConstructDirectedCatalogGraph',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(postData),
                    dataType: 'json',
                    success: handleAnalyzeCatalogSuccess,
                    error: handleAnalyzeCatalogError,
                    complete: enableControls // Re-enable controls when done
                });
            }

            function handleAnalyzeCatalogSuccess(response) {
                 clearMessages(); // Clear processing message
                 if (response && response.success && response.graph && typeof response.graph === 'object' && Object.keys(response.graph).length > 0) {
                    showMessage('Analysis successful. Rendering dependency graph...', 'success');
                    // *** CALL THE RENAMED FUNCTION ***
                    renderDirectedGraph(response.graph); // Call the rendering function for directed graph
                 } else if (response && response.success) {
                     // Handle case where analysis succeeded but no graph data was returned
                     showMessage('Analysis completed, but no dependency data was found for this catalog.', 'warning');
                     hideGraph();
                 }
                 else {
                    // Handle analysis failure reported by the API (success: false)
                    const errorMessage = response && response.message ? response.message : 'Analysis failed. No specific error message provided.';
                    showMessage(`Analysis failed: ${errorMessage}`, 'danger');
                    hideGraph();
                 }
            }

            function handleAnalyzeCatalogError(jqXHR, textStatus, errorThrown) {
                clearMessages(); // Clear processing message
                console.error("AJAX Error (AnalyzeCatalog - Directed):", textStatus, errorThrown, jqXHR.responseText); // Updated log message
                let errorMsg = 'An error occurred while sending the analysis request.';
                if (jqXHR.status === 404) {
                    errorMsg = 'Analysis endpoint not found (404). Check the URL.';
                } else if (jqXHR.status === 500) {
                    errorMsg = 'A server error occurred during analysis (500). Please check server logs or contact support.';
                } else if (textStatus === 'parsererror') {
                    errorMsg = 'Failed to parse the server response. Expected JSON but received something else.';
                    console.log("Raw response text:", jqXHR.responseText);
                }
                showMessage(errorMsg, 'danger');
                hideGraph();
            }

            // *** RENAMED FUNCTION and UPDATED EDGE LOGIC ***
            function renderDirectedGraph(graphData) {
                // Check if Cytoscape and Dagre dependencies are loaded
                if (typeof cytoscape === 'undefined') {
                    console.error("Cytoscape library is not loaded!");
                    showMessage('Error: Cytoscape library failed to load.', 'danger');
                    return;
                }
                if (typeof dagre === 'undefined') {
                    console.error("Dagre core library is not loaded!");
                    showMessage('Error: Dagre core library failed to load.', 'danger');
                    return;
                }
                 if (typeof cytoscapeDagre === 'undefined') {
                    console.error("Cytoscape Dagre extension (adapter) is not loaded!");
                    showMessage('Error: Cytoscape Dagre extension failed to load.', 'danger');
                    return;
                }


                const elements = [];
                let processingError = false;
                try {
                    // 1. Create Nodes
                    Object.keys(graphData).forEach(nodeName => {
                        const nodeData = graphData[nodeName];
                         if (!nodeData || typeof nodeData.type === 'undefined') {
                            console.error(`Invalid data for node: ${nodeName}`, nodeData);
                            processingError = true;
                            return; // Skip this invalid node
                        }
                        elements.push({
                            group: 'nodes',
                            data: { id: nodeName, label: nodeName, type: nodeData.type }
                        });
                    });

                    // 2. Create Edges (using outNodes for directed graph)
                    if (!processingError) {
                        Object.keys(graphData).forEach(sourceNodeName => {
                            const nodeData = graphData[sourceNodeName];
                            // *** USE outNodes for directed edges ***
                            if (nodeData.outNodes && Array.isArray(nodeData.outNodes)) {
                                nodeData.outNodes.forEach(targetNodeName => {
                                    // Check if the target node actually exists in the graph data
                                    if (graphData[targetNodeName]) {
                                        elements.push({
                                            group: 'edges',
                                            // Create a unique ID for the edge
                                            data: {
                                                id: `edge_${sourceNodeName}_to_${targetNodeName}`,
                                                source: sourceNodeName,
                                                target: targetNodeName
                                            }
                                        });
                                    } else {
                                         console.warn(`Target node "${targetNodeName}" referenced by "${sourceNodeName}" (outNodes) not found in graph data. Skipping edge.`);
                                    }
                                });
                            }
                        });
                    }

                } catch (e) {
                    console.error("Error processing graph data:", e);
                    showMessage('Error processing graph data. Check console.', 'danger');
                    processingError = true;
                }

                if(processingError) {
                    hideGraph();
                    return; // Don't attempt to render if processing failed
                }

                // --- Render Graph ---
                try {
                    graphContainer.show(); // Show the container
                    cyInstance = cytoscape({
                        container: document.getElementById('cy'),
                        elements: elements,
                        style: [ // Node and Edge styles (remain the same)
                            {
                                selector: 'node',
                                style: {
                                    'background-color': '#666', 'label': 'data(label)', 'width': 'label', 'height': 'label',
                                    'padding': '10px', 'shape': 'rectangle', 'text-valign': 'center', 'text-halign': 'center',
                                    'font-size': '10px', 'color': '#fff', 'text-outline-width': 1, 'text-outline-color': '#666'
                                }
                            },
                            {
                                selector: 'node[type = 0]', // Tables
                                style: { 'background-color': '#3498db', 'shape': 'round-rectangle', 'text-outline-color': '#3498db' }
                            },
                            {
                                selector: 'node[type = 1]', // Stored Procs
                                style: { 'background-color': '#f1c40f', 'shape': 'ellipse', 'text-outline-color': '#f1c40f', 'color': '#333' }
                            },
                            {
                                selector: 'edge',
                                style: {
                                    'width': 2, 'line-color': '#ccc', 'target-arrow-color': '#ccc',
                                    'target-arrow-shape': 'triangle', // Arrows indicate direction
                                    'curve-style': 'bezier'
                                }
                            }
                        ],
                        // Use Dagre layout (configuration remains the same)
                        layout: {
                            name: 'dagre',
                            rankDir: 'TB',
                            align: 'UL',
                            spacingFactor: 1.1,
                            nodeDimensionsIncludeLabels: true,
                            ranker: 'network-simplex',
                            fit: true,
                            padding: 30
                        }
                    });

                    // Add zoom/pan controls
                    cyInstance.zoomingEnabled(true);
                    cyInstance.panningEnabled(true);
                    cyInstance.userZoomingEnabled(true);
                    cyInstance.userPanningEnabled(true);

                    // Update success message after rendering
                     showMessage('Analysis successful. Dependency graph rendered.', 'success');

                } catch (e) {
                    console.error("Error rendering graph:", e); // Line 396 in previous error
                    showMessage('Error rendering the graph. Check console for details.', 'danger');
                    hideGraph();
                }
            }
        });
    </script>
}